---
title: "Day4"
format: html
editor: visual
execute: 
  warning: false
---

```{r}
library(tidyverse)
```

## Functions

Make a function that doubles a value

```{r}
double_value <- function(my_dollars) {
  print(2 * my_dollars)
}

double_value(my_dollars = 10.13)
# OR, because it is expecting 1 value and you are entering 1 value you do not need to specify
double_value(10.13)
```

```{r}
monthly_income <- c(42.50, 61.75, 89.50)
# works on a vector
double_value(monthly_income)
```

```{r}

double_value2 <- function(dollars) {
  dollars * 2
}

double_value2(dollars = 10)
```

Print statement = "show me"

return statement = "store me"

Create a function that returns a restaurant name given a cool animal and your favorite food

```{r}
name_restaurant <- function(animal, food) {
  print(paste0(animal, food))
}

name_restaurant(animal = "hawk", food = "pizza")
```

Given a temperature in degrees fahrenheit, write a function that converts it to celcius

```{r}
convert_fc <- function(temp_f) {
  print((temp_f - 32) * (5/9))
}

```

```{r}

convert_fc(temp_f = 52)
```

Create a function that given inputs of age and hometown returns "I am \_ years old, and Im from \_"

```{r}
describe_person <- function(age_yr, home_town) {
  print(paste("I am", age, "years old, and I'm from", home_town))
}

describe_person(age = 20, home_town = "Pleasanton")
```

## Functions with Conditionals

```{r}
calculate_animal_age <- function(species, age_human) {
  if (species == "dog") {
    age_human * 7
  } else if (species == "goat") {
    age_human * 4.7
  } else {
    print("please enter dog or goat.")
  }
}
```

```{r}
calculate_animal_age(species = "dog", age_human = 10)

calculate_animal_age(species = "goat", age_human = 4)

calculate_animal_age(species = "whale", age_human = 10)
```

write a function that, given temp in kelvin, if a user selects "metric", return in celcius, if they select "english" then return in fahrenheit

```{r}
convert_kelvin <- function(temp_kelvin, temp_type) {
  if (temp_type == "metric") {
    temp_kelvin - 273.15
  } else if (temp_type == "english") {
    ((temp_kelvin - 273.15) * (9/5)) + 32
  }
}

convert_kelvin(temp_kelvin = 0, temp_type = "english")
```

## Functions with loops 

create a data frame and then our function is going to return something about a single row in the dataframe = creating a subset within a function and then return based on that subset

```{r}
# make a data frame
dog_choice <- data.frame(dog_name = c("Khora", "Teddy", "Waffle", "Banjo", "Tally"), 
                         food = c("everything", "salmon", "pancakes", "chicken", "enchiladas"))
```

```{r}
# making a function
# filter dog choice data frame where dog name equals the variable for that row, aka only keep waffle


dog_menu <- function(enter_dog_name) {
  dog_subset <- filter(dog_choice, dog_name == enter_dog_name)
  print(paste("My name is", dog_subset$dog_name, "and my favorite food is", dog_subset$food))
}

dog_menu(enter_dog_name = "Waffle")
```

## Function with a for loop

```{r}
# make a function, iterate along df, calculate mean of each column in the data frame, and accessing column name of each when iterating

df_means <- function(df) {
  for (i in seq_along(df)) {
    col_mean <- round(mean(df[[i]], na.rm = TRUE), 2)
    column_name <- colnames(df[i])
    print(paste("The mean value of", column_name, "is", col_mean))
  }
}
```

```{r}
# use df means on mtcars
df_means(df = mtcars)
```

```{r}
df_means(faithful)
```

## 
